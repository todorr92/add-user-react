{"ast":null,"code":"import _slicedToArray from\"C:/Users/todor/Coding/React Udemy/01-starting-project/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState,useRef}from\"react\";import Card from\"../UI/Card\";import Button from\"../UI/Button\";import classes from\"./AddUser.module.css\";import ErrorModal from\"../UI/ErrorModal\";import Wrapper from\"../Helpers/Wrapper\";// when using useRef, we have uncontrolled components, while with useState we have controlled components\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var AddUser=function AddUser(props){var nameInputRef=useRef();var ageInputRef=useRef();// commenting out useStates as they are not needed anymore due to use of useRef\n//   const [enteredUsername, setEnteredUsername] = useState(\"\");\n//   const [enteredAge, setEnteredAge] = useState(\"\");\nvar _useState=useState(),_useState2=_slicedToArray(_useState,2),error=_useState2[0],setError=_useState2[1];// initial value is undenfined so no need to pass anything inside parentheses\nvar addUserHandler=function addUserHandler(event){event.preventDefault();var enteredName=nameInputRef.current.value;var enteredUserAge=ageInputRef.current.value;if(enteredName.trim().length===0||enteredUserAge.trim().length===0){setError({title:\"Invalid input\",message:\"Please enter a valid name and age (non-empty values).\"});return;}// enteredAge is a string, by adding + we are forcing it to convert to a number\nif(+enteredUserAge<1){setError({title:\"Invalid age\",message:\"Please enter a valid age (> 0).\"});return;}props.onAddUser(enteredName,enteredUserAge);// reseting input values after submit, not the best way to do it as it is manipulating the DOM, alternative would be useState commented below\nnameInputRef.current.value=\"\";ageInputRef.current.value=\"\";// commenting out useStates as they are not needed anymore due to use of useRef\n// setEnteredUsername(\"\");\n// setEnteredAge(\"\");\n};// commenting out useStates as they are not needed anymore due to use of useRef\n//   const usernameChangeHandler = (event) => {\n//     setEnteredUsername(event.target.value);\n//   };\n//   const ageChangeHandler = (event) => {\n//     setEnteredAge(event.target.value);\n//   };\nvar errorHandler=function errorHandler(){setError(null);};return/*#__PURE__*/ (//   due to React limitations, we need to wrap everything so one element is returned, usually that's empty <div>, depending on how many components are used\n//   there can be to many divs rendered in DOM, to avoid this we can create an Wrapper component which returns only children which is basically content below\n_jsxs(Wrapper,{children:[error&&/*#__PURE__*/_jsx(ErrorModal,{title:error.title,message:error.message,onConfirm:errorHandler}),/*#__PURE__*/_jsx(Card,{className:classes.input,children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:addUserHandler,children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"username\",children:\"Username\"}),/*#__PURE__*/_jsx(\"input\",{id:\"username\",type:\"text\"// commenting out useStates as they are not needed anymore due to use of useRef\n// value={enteredUsername}\n// onChange={usernameChangeHandler}\n,ref:nameInputRef}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"age\",children:\"Age (Years)\"}),/*#__PURE__*/_jsx(\"input\",{id:\"age\",type:\"number\"// commenting out useStates as they are not needed anymore due to use of useRef\n// value={enteredAge}\n// onChange={ageChangeHandler}\n,ref:ageInputRef}),/*#__PURE__*/_jsx(Button,{type:\"submit\",children:\"Add User\"})]})})]}));};export default AddUser;","map":{"version":3,"sources":["C:/Users/todor/Coding/React Udemy/01-starting-project/src/Components/Users/AddUser.js"],"names":["useState","useRef","Card","Button","classes","ErrorModal","Wrapper","AddUser","props","nameInputRef","ageInputRef","error","setError","addUserHandler","event","preventDefault","enteredName","current","value","enteredUserAge","trim","length","title","message","onAddUser","errorHandler","input"],"mappings":"2IAAA,OAASA,QAAT,CAAmBC,MAAnB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,IAAP,KAAiB,YAAjB,CACA,MAAOC,CAAAA,MAAP,KAAmB,cAAnB,CACA,MAAOC,CAAAA,OAAP,KAAoB,sBAApB,CACA,MAAOC,CAAAA,UAAP,KAAuB,kBAAvB,CACA,MAAOC,CAAAA,OAAP,KAAoB,oBAApB,CAEA;wFAEA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAW,CACzB,GAAMC,CAAAA,YAAY,CAAGR,MAAM,EAA3B,CACA,GAAMS,CAAAA,WAAW,CAAGT,MAAM,EAA1B,CACA;AACA;AACA;AACA,cAA0BD,QAAQ,EAAlC,wCAAOW,KAAP,eAAcC,QAAd,eAAsC;AAEtC,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,KAAD,CAAW,CAChCA,KAAK,CAACC,cAAN,GACA,GAAMC,CAAAA,WAAW,CAAGP,YAAY,CAACQ,OAAb,CAAqBC,KAAzC,CACA,GAAMC,CAAAA,cAAc,CAAGT,WAAW,CAACO,OAAZ,CAAoBC,KAA3C,CACA,GAAIF,WAAW,CAACI,IAAZ,GAAmBC,MAAnB,GAA8B,CAA9B,EAAmCF,cAAc,CAACC,IAAf,GAAsBC,MAAtB,GAAiC,CAAxE,CAA2E,CACzET,QAAQ,CAAC,CACPU,KAAK,CAAE,eADA,CAEPC,OAAO,CAAE,uDAFF,CAAD,CAAR,CAIA,OACD,CACD;AACA,GAAI,CAACJ,cAAD,CAAkB,CAAtB,CAAyB,CACvBP,QAAQ,CAAC,CACPU,KAAK,CAAE,aADA,CAEPC,OAAO,CAAE,iCAFF,CAAD,CAAR,CAIA,OACD,CACDf,KAAK,CAACgB,SAAN,CAAgBR,WAAhB,CAA6BG,cAA7B,EACA;AACAV,YAAY,CAACQ,OAAb,CAAqBC,KAArB,CAA6B,EAA7B,CACAR,WAAW,CAACO,OAAZ,CAAoBC,KAApB,CAA4B,EAA5B,CAEA;AACA;AACA;AACD,CA3BD,CA6BA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA,GAAMO,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACzBb,QAAQ,CAAC,IAAD,CAAR,CACD,CAFD,CAIA,oBACE;AACA;AACA,MAAC,OAAD,YAEGD,KAAK,eACJ,KAAC,UAAD,EACE,KAAK,CAAEA,KAAK,CAACW,KADf,CAEE,OAAO,CAAEX,KAAK,CAACY,OAFjB,CAGE,SAAS,CAAEE,YAHb,EAHJ,cAUE,KAAC,IAAD,EAAM,SAAS,CAAErB,OAAO,CAACsB,KAAzB,uBACE,cAAM,QAAQ,CAAEb,cAAhB,wBACE,cAAO,OAAO,CAAC,UAAf,sBADF,cAEE,cACE,EAAE,CAAC,UADL,CAEE,IAAI,CAAC,MACL;AACA;AACA;AALF,CAME,GAAG,CAAEJ,YANP,EAFF,cAUE,cAAO,OAAO,CAAC,KAAf,yBAVF,cAWE,cACE,EAAE,CAAC,KADL,CAEE,IAAI,CAAC,QACL;AACA;AACA;AALF,CAME,GAAG,CAAEC,WANP,EAXF,cAmBE,KAAC,MAAD,EAAQ,IAAI,CAAC,QAAb,sBAnBF,GADF,EAVF,GAHF,EAsCD,CAzFD,CA2FA,cAAeH,CAAAA,OAAf","sourcesContent":["import { useState, useRef } from \"react\";\r\nimport Card from \"../UI/Card\";\r\nimport Button from \"../UI/Button\";\r\nimport classes from \"./AddUser.module.css\";\r\nimport ErrorModal from \"../UI/ErrorModal\";\r\nimport Wrapper from \"../Helpers/Wrapper\";\r\n\r\n// when using useRef, we have uncontrolled components, while with useState we have controlled components\r\n\r\nconst AddUser = (props) => {\r\n  const nameInputRef = useRef();\r\n  const ageInputRef = useRef();\r\n  // commenting out useStates as they are not needed anymore due to use of useRef\r\n  //   const [enteredUsername, setEnteredUsername] = useState(\"\");\r\n  //   const [enteredAge, setEnteredAge] = useState(\"\");\r\n  const [error, setError] = useState(); // initial value is undenfined so no need to pass anything inside parentheses\r\n\r\n  const addUserHandler = (event) => {\r\n    event.preventDefault();\r\n    const enteredName = nameInputRef.current.value;\r\n    const enteredUserAge = ageInputRef.current.value;\r\n    if (enteredName.trim().length === 0 || enteredUserAge.trim().length === 0) {\r\n      setError({\r\n        title: \"Invalid input\",\r\n        message: \"Please enter a valid name and age (non-empty values).\",\r\n      });\r\n      return;\r\n    }\r\n    // enteredAge is a string, by adding + we are forcing it to convert to a number\r\n    if (+enteredUserAge < 1) {\r\n      setError({\r\n        title: \"Invalid age\",\r\n        message: \"Please enter a valid age (> 0).\",\r\n      });\r\n      return;\r\n    }\r\n    props.onAddUser(enteredName, enteredUserAge);\r\n    // reseting input values after submit, not the best way to do it as it is manipulating the DOM, alternative would be useState commented below\r\n    nameInputRef.current.value = \"\";\r\n    ageInputRef.current.value = \"\";\r\n\r\n    // commenting out useStates as they are not needed anymore due to use of useRef\r\n    // setEnteredUsername(\"\");\r\n    // setEnteredAge(\"\");\r\n  };\r\n\r\n  // commenting out useStates as they are not needed anymore due to use of useRef\r\n\r\n  //   const usernameChangeHandler = (event) => {\r\n  //     setEnteredUsername(event.target.value);\r\n  //   };\r\n\r\n  //   const ageChangeHandler = (event) => {\r\n  //     setEnteredAge(event.target.value);\r\n  //   };\r\n\r\n  const errorHandler = () => {\r\n    setError(null);\r\n  };\r\n\r\n  return (\r\n    //   due to React limitations, we need to wrap everything so one element is returned, usually that's empty <div>, depending on how many components are used\r\n    //   there can be to many divs rendered in DOM, to avoid this we can create an Wrapper component which returns only children which is basically content below\r\n    <Wrapper>\r\n      {/* this syntaxs works as if there is an error, display error modal, otherwise nothing */}\r\n      {error && (\r\n        <ErrorModal\r\n          title={error.title}\r\n          message={error.message}\r\n          onConfirm={errorHandler}\r\n        />\r\n      )}\r\n      {/* // this is props set in Card.js(props.className) it could be any different name */}\r\n      <Card className={classes.input}>\r\n        <form onSubmit={addUserHandler}>\r\n          <label htmlFor=\"username\">Username</label>\r\n          <input\r\n            id=\"username\"\r\n            type=\"text\"\r\n            // commenting out useStates as they are not needed anymore due to use of useRef\r\n            // value={enteredUsername}\r\n            // onChange={usernameChangeHandler}\r\n            ref={nameInputRef}\r\n          />\r\n          <label htmlFor=\"age\">Age (Years)</label>\r\n          <input\r\n            id=\"age\"\r\n            type=\"number\"\r\n            // commenting out useStates as they are not needed anymore due to use of useRef\r\n            // value={enteredAge}\r\n            // onChange={ageChangeHandler}\r\n            ref={ageInputRef}\r\n          />\r\n          <Button type=\"submit\">Add User</Button>\r\n        </form>\r\n      </Card>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default AddUser;\r\n"]},"metadata":{},"sourceType":"module"}